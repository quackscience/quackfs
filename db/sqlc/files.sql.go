// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: files.sql

package sqlc

import (
	"context"
)

const getAllFiles = `-- name: GetAllFiles :many
SELECT id, name FROM files
`

func (q *Queries) GetAllFiles(ctx context.Context) ([]File, error) {
	rows, err := q.query(ctx, q.getAllFilesStmt, getAllFiles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []File{}
	for rows.Next() {
		var i File
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFileIDByName = `-- name: GetFileIDByName :one
SELECT id FROM files WHERE name = $1
`

func (q *Queries) GetFileIDByName(ctx context.Context, name string) (uint64, error) {
	row := q.queryRow(ctx, q.getFileIDByNameStmt, getFileIDByName, name)
	var id uint64
	err := row.Scan(&id)
	return id, err
}

const insertFile = `-- name: InsertFile :one
INSERT INTO files (name) VALUES ($1) RETURNING id
`

func (q *Queries) InsertFile(ctx context.Context, name string) (uint64, error) {
	row := q.queryRow(ctx, q.insertFileStmt, insertFile, name)
	var id uint64
	err := row.Scan(&id)
	return id, err
}
