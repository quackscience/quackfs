// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: snapshot_layers.sql

package sqlc

import (
	"context"
	"database/sql"
)

const getLayerByVersion = `-- name: GetLayerByVersion :one
SELECT 
    snapshot_layers.id, 
    snapshot_layers.file_id, 
    snapshot_layers.version_id, 
    versions.tag, 
    snapshot_layers.object_key
FROM 
    snapshot_layers
INNER JOIN 
    versions ON versions.id = snapshot_layers.version_id
WHERE 
    snapshot_layers.file_id = $1 AND versions.tag = $2
`

type GetLayerByVersionParams struct {
	FileID uint64 `json:"fileId"`
	Tag    string `json:"tag"`
}

type GetLayerByVersionRow struct {
	ID        uint64        `json:"id"`
	FileID    uint64        `json:"fileId"`
	VersionID sql.NullInt64 `json:"versionId"`
	Tag       string        `json:"tag"`
	ObjectKey string        `json:"objectKey"`
}

func (q *Queries) GetLayerByVersion(ctx context.Context, arg GetLayerByVersionParams) (GetLayerByVersionRow, error) {
	row := q.queryRow(ctx, q.getLayerByVersionStmt, getLayerByVersion, arg.FileID, arg.Tag)
	var i GetLayerByVersionRow
	err := row.Scan(
		&i.ID,
		&i.FileID,
		&i.VersionID,
		&i.Tag,
		&i.ObjectKey,
	)
	return i, err
}

const getLayersByFileID = `-- name: GetLayersByFileID :many
SELECT 
    snapshot_layers.id, 
    snapshot_layers.file_id, 
    snapshot_layers.version_id, 
    versions.tag, 
    snapshot_layers.object_key
FROM 
    snapshot_layers
LEFT JOIN 
    versions ON snapshot_layers.version_id = versions.id
WHERE 
    snapshot_layers.file_id = $1 
ORDER BY 
    snapshot_layers.id ASC
`

type GetLayersByFileIDRow struct {
	ID        uint64         `json:"id"`
	FileID    uint64         `json:"fileId"`
	VersionID sql.NullInt64  `json:"versionId"`
	Tag       sql.NullString `json:"tag"`
	ObjectKey string         `json:"objectKey"`
}

func (q *Queries) GetLayersByFileID(ctx context.Context, fileID uint64) ([]GetLayersByFileIDRow, error) {
	rows, err := q.query(ctx, q.getLayersByFileIDStmt, getLayersByFileID, fileID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetLayersByFileIDRow{}
	for rows.Next() {
		var i GetLayersByFileIDRow
		if err := rows.Scan(
			&i.ID,
			&i.FileID,
			&i.VersionID,
			&i.Tag,
			&i.ObjectKey,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getObjectKey = `-- name: GetObjectKey :one
SELECT 
    object_key
FROM 
    snapshot_layers
WHERE 
    id = $1
`

func (q *Queries) GetObjectKey(ctx context.Context, id uint64) (string, error) {
	row := q.queryRow(ctx, q.getObjectKeyStmt, getObjectKey, id)
	var object_key string
	err := row.Scan(&object_key)
	return object_key, err
}

const insertLayer = `-- name: InsertLayer :one
INSERT INTO 
    snapshot_layers (file_id, version_id, object_key) 
VALUES 
    ($1, $2, $3) 
RETURNING id
`

type InsertLayerParams struct {
	FileID    uint64        `json:"fileId"`
	VersionID sql.NullInt64 `json:"versionId"`
	ObjectKey string        `json:"objectKey"`
}

func (q *Queries) InsertLayer(ctx context.Context, arg InsertLayerParams) (uint64, error) {
	row := q.queryRow(ctx, q.insertLayerStmt, insertLayer, arg.FileID, arg.VersionID, arg.ObjectKey)
	var id uint64
	err := row.Scan(&id)
	return id, err
}
