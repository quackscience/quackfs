// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: chunks.sql

package sqlc

import (
	"context"

	"github.com/vinimdocarmo/quackfs/db/types"
)

const calcFileSize = `-- name: CalcFileSize :one
SELECT 
    UPPER(e.file_range)::BIGINT as file_size
FROM 
    chunks e
INNER JOIN 
    snapshot_layers l ON e.snapshot_layer_id = l.id
WHERE 
    l.file_id = $1
ORDER BY 
    UPPER(e.file_range) DESC
LIMIT 1
`

func (q *Queries) CalcFileSize(ctx context.Context, fileID uint64) (int64, error) {
	row := q.queryRow(ctx, q.calcFileSizeStmt, calcFileSize, fileID)
	var file_size int64
	err := row.Scan(&file_size)
	return file_size, err
}

const getLayerChunks = `-- name: GetLayerChunks :many
SELECT 
    layer_range, 
    file_range
FROM 
    chunks
WHERE 
    snapshot_layer_id = $1
ORDER BY 
    id ASC
`

type GetLayerChunksRow struct {
	LayerRange types.Range `json:"layerRange"`
	FileRange  types.Range `json:"fileRange"`
}

func (q *Queries) GetLayerChunks(ctx context.Context, snapshotLayerID uint64) ([]GetLayerChunksRow, error) {
	rows, err := q.query(ctx, q.getLayerChunksStmt, getLayerChunks, snapshotLayerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetLayerChunksRow{}
	for rows.Next() {
		var i GetLayerChunksRow
		if err := rows.Scan(&i.LayerRange, &i.FileRange); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOverlappingChunksWithVersion = `-- name: GetOverlappingChunksWithVersion :many
SELECT 
    c.snapshot_layer_id, 
    c.layer_range, 
    c.file_range
FROM 
    chunks c
INNER JOIN 
    snapshot_layers l ON c.snapshot_layer_id = l.id
WHERE
    -- if versionedLayerID is 0, then we don't filter by layer ID
    ($1 = 0 OR l.id <= $1) AND
    l.file_id = $2 AND c.file_range && $3::INT8RANGE
ORDER BY 
    l.id ASC, c.id ASC
`

type GetOverlappingChunksWithVersionParams struct {
	VersionedLayerID interface{} `json:"versionedLayerID"`
	FileID           uint64      `json:"fileID"`
	Range            types.Range `json:"range"`
}

type GetOverlappingChunksWithVersionRow struct {
	SnapshotLayerID uint64      `json:"snapshotLayerId"`
	LayerRange      types.Range `json:"layerRange"`
	FileRange       types.Range `json:"fileRange"`
}

func (q *Queries) GetOverlappingChunksWithVersion(ctx context.Context, arg GetOverlappingChunksWithVersionParams) ([]GetOverlappingChunksWithVersionRow, error) {
	rows, err := q.query(ctx, q.getOverlappingChunksWithVersionStmt, getOverlappingChunksWithVersion, arg.VersionedLayerID, arg.FileID, arg.Range)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetOverlappingChunksWithVersionRow{}
	for rows.Next() {
		var i GetOverlappingChunksWithVersionRow
		if err := rows.Scan(&i.SnapshotLayerID, &i.LayerRange, &i.FileRange); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertChunk = `-- name: InsertChunk :exec
INSERT INTO 
    chunks (snapshot_layer_id, layer_range, file_range) 
VALUES 
    ($1, $2, $3)
`

type InsertChunkParams struct {
	SnapshotLayerID uint64      `json:"snapshotLayerId"`
	LayerRange      types.Range `json:"layerRange"`
	FileRange       types.Range `json:"fileRange"`
}

func (q *Queries) InsertChunk(ctx context.Context, arg InsertChunkParams) error {
	_, err := q.exec(ctx, q.insertChunkStmt, insertChunk, arg.SnapshotLayerID, arg.LayerRange, arg.FileRange)
	return err
}
